{
  
    
        "post0": {
            "title": "Groupbooks",
            "content": "Week 8: . Project Notes: . Row 1: Program Purpose and Function Input: Artist Name and Album Output: Album duration, album song names, number of songs, album cover photo The purpose of this program is to provide users with data about their favorite artists including their albums, songs, and album duration and allow them to choose their favorite artists. Row 2: Data Abstraction Data about song and artists stored in dictionary which is retrieved using API Row 3: Managing Complexity use a function to read user input and only provide wanted album information allowing user to use favorites tab to organize the artists they enjoy Row 4: Procedural Abstraction using artist[album], retrieve only wanted data from the dictionary. call developed function to run based on user input. Row 5: Algorithm Implementation develop algorithim to count number of songs in album given API data algorithm to create ‘favorite artists’ tab, where users can select their favorite artists to be saved in a seperate section of the application Row 6: Testing Input multiple artists and album. See if each selected data type displays proper data. Add artists to ‘favorites’ and see if that data is stored . . . . .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/10/09/groupbooks.html",
            "relUrl": "/2022/10/09/groupbooks.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Group_project",
            "content": "Week 8: . Project Notes: . Row 1: Program Purpose and Function Input: Artist Name and Album Output: Album duration, album song names, number of songs, album cover photo The purpose of this program is to provide users with data about their favorite artists including their albums, songs, and album duration and allow them to choose their favorite artists. . Row 2: Data Abstraction Data about song and artists stored in dictionary which is retrieved using API . Row 3: Managing Complexity use a function to read user input and only provide wanted album information allowing user to use favorites tab to organize the artists they enjoy . Row 4: Procedural Abstraction using artist[album], retrieve only wanted data from the dictionary. call developed function to run based on user input. . Row 5: Algorithm Implementation develop algorithim to count number of songs in album given API data algorithm to create ‘favorite artists’ tab, where users can select their favorite artists to be saved in a seperate section of the application . Row 6: Testing Input multiple artists and album. See if each selected data type displays proper data. Add artists to ‘favorites’ and see if that data is stored . . . . .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/10/09/group_project.html",
            "relUrl": "/2022/10/09/group_project.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Deployment1",
            "content": "Week 7: . AP Classroom 1.1 - 1.3 Multiple Choice Results: . .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/10/01/deployment1.html",
            "relUrl": "/2022/10/01/deployment1.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "College Board 1.1 - 1.3",
            "content": "College Board 1.1 - 1.3: . Week 7: . College Board AP Prep Multiple Choice: . .",
            "url": "https://amitha-sanka.github.io/repository_1/markdown/2022/09/30/deployment.html",
            "relUrl": "/markdown/2022/09/30/deployment.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Jupyter JS Kernel",
            "content": "console.log(&quot;Hi&quot;); . Hi . var msg = &quot;Hi&quot;; console.log(msg); . Hi . function logIt(output) { console.log(output); } logIt(msg); . Hi . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hi&quot;); logIt(2022) . Reuse of logIT Hi 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Functions in JavaScript&quot;) logItType(&quot;hi&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Functions in JavaScript string ; hi number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, sport, age) { this.name = name; this.sport = sport; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, sport: this.sport, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Ms Smith&quot;, &quot;tennis&quot;, 32); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Ms Smith&#39;, sport: &#39;tennis&#39;, age: 32, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Ms Smith&#34;,&#34;sport&#34;:&#34;tennis&#34;,&#34;age&#34;:32,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Ms Smith&#39;, sport: &#39;tennis&#39;, age: 32, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Ms Smith&#34;,&#34;sport&#34;:&#34;tennis&#34;,&#34;age&#34;:32,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Tanisha&quot;, &quot;hockey&quot;, 15), new Person(&quot;Claire&quot;, &quot;hockey&quot;, 15), new Person(&quot;Amitha&quot;, &quot;track&quot;, 16), new Person(&quot;Grace&quot;, &quot;basketball&quot;, 17), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Ms Smith&#39;, sport: &#39;tennis&#39;, age: 32, role: &#39;Teacher&#39; }, Person { name: &#39;Tanisha&#39;, sport: &#39;hockey&#39;, age: 15, role: &#39;Student&#39; }, Person { name: &#39;Claire&#39;, sport: &#39;hockey&#39;, age: 15, role: &#39;Student&#39; }, Person { name: &#39;Amitha&#39;, sport: &#39;track&#39;, age: 16, role: &#39;Student&#39; }, Person { name: &#39;Grace&#39;, sport: &#39;basketball&#39;, age: 17, role: &#39;Student&#39; } ] string ; Ms Smith string ; {&#34;name&#34;:&#34;Ms Smith&#34;,&#34;sport&#34;:&#34;tennis&#34;,&#34;age&#34;:32,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Ms Smith&#39;, sport: &#39;tennis&#39;, age: 32, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Sport&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.sport + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameSportAgeRole . Ms Smith | tennis | 32 | Teacher | Tanisha | hockey | 15 | Student | Claire | hockey | 15 | Student | Amitha | track | 16 | Student | Grace | basketball | 17 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/09/25/javascripttutorial.html",
            "relUrl": "/2022/09/25/javascripttutorial.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Javascript Functions",
            "content": "console.log(&quot;hello world&quot;) // Console acts as a print and prints what is in the parenthesis . // var: assigns variable var msg=&quot;hey&quot;; console.log(msg) . // var: assigns variable var msg=&quot;user&quot;; console.log(&quot;hi &quot; + msg) // &quot;str&quot; + var : this prints the string and then what the variable is assigned right after . console.log(Math.max(1, 3, 2, 4, 5, 2, 9)); // Math.max will find max value and uses console to print .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/09/25/javascriptcheatsheet.html",
            "relUrl": "/2022/09/25/javascriptcheatsheet.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Agilemethodology",
            "content": "Week 6: . Scrum Board: ! Week 6 . Agile Methodology Principles: ! Week 6 . Git Scrum Board ! Week 6 . Team Project: ! Week 6 .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/09/25/agilemethodology.html",
            "relUrl": "/2022/09/25/agilemethodology.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Collegeboardquiz",
            "content": "! Collegeboard .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/09/20/collegeboardquiz.html",
            "relUrl": "/2022/09/20/collegeboardquiz.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Amitha's Blog",
            "content": "Gratitude List: . Water | Hydro Flask | Opportunity and access to education | House and having a roof over my head | Family | Friends | . I think a few goals I should set in my life are trying to go to bed at least an hour early each day and checking in on my friends and family more often in terms of my personal life. Academically, I think I need to plan ahead and use my time wisely and efficiently. Since it is college application season, another current goal of mine is to not fall behind and procrastinate just because I have so much time and my college work can wait. .",
            "url": "https://amitha-sanka.github.io/repository_1/markdown/2022/09/14/psychology.goodlife",
            "relUrl": "/markdown/2022/09/14/psychology.goodlife",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "APCSP Notes",
            "content": "Linux Commands . Command Description . ls | lists computer files | . cd | changes working directory | . pwd | prints working directory | . echo | used to display a line of text | . cat | reads data from file and gives contents as output | . env | shows setting for cell | . git clone | sets up a director of files | . cd $project | moves inside that directory of files | .",
            "url": "https://amitha-sanka.github.io/repository_1/markdown/2022/08/30/csp-notes.html",
            "relUrl": "/markdown/2022/08/30/csp-notes.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://amitha-sanka.github.io/repository_1/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Bash Installation Check",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/repository_1 # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/gwang1224/repository_1.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/amitha/vscode exists. Directory /Users/amitha/vscode/repository_1 exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls . Navigate to project, then navigate to area wwhere files were cloned /Users/amitha/vscode/repository_1 list top level or root of files with project pulled from github 2022-05-15-07-21-16.png _config.yml _sass 2022-05-15-07-24-25.png _fastpages_docs _word 2022-05-15-07-25-15.png _includes assets Gemfile _layouts docker-compose.yml LICENSE _notebooks images Makefile _pages index.html README.md _plugins _action_files _posts . python --version python2 --version . Python 3.9.12 Python 2.7.18 .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/08/28/bash-check.html",
            "relUrl": "/2022/08/28/bash-check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Amitha's Blog",
            "content": "Amitha’s blog post, amitha’s notebo . Grocery List . apples | tide detergent | bananas | strawberries | milk | almond milk | . Schedule . Class Start Time End Time . AP Calculus | 8:35 | 9:44 | . Ethnic Literature | 9:49 | 10:58 | . Break | 10:58 | 11:08 | . AP Studio Art | 11:13 | 12:52 | . Lunch | 12:22 | 12:52 | . AP Computer Science Principles | 12:57 | 2:06 | . Office Hours | 2:06 | 2:31 | . Ethnic Literature Homework . Friday: . I went to La Jolla beach with my friends and we walked around and found the La Jolla Observatory Deck, which is a hidden spot in San Diego. We watched the sunset from the deck and it was pretty. After, we went to Del Mar and got dinner in a food court. I had ramen with chicken and it tasted really good. The name of the restaurant is Marufuku ramen in Del Mar. After we ate dinner we went to One Paseo and got ice cream at Salt &amp; Straw. . Saturday: . I ran errands with my dad and drove him to each place he needed to go to because I have my permit, so I get in my driving practice while my dad gets his errands done. In the afternoon, I went to my best friend’s birthday party. She turned 17. Before the party, I went to my friend’s house and I got ready with her. Then, we both went to our friend’s house and met up with everyone. She got a party bus for everyone, so we took the party bus to Little Italy in San Diego Downtown. On the way there, we all sang and danced to music. After one hour we got down in Little Italy and ate dinner at an Italian restaurant. I had lobster ravioli followed by tiramisu cake, which were both very good. After we finished with dinner, we went on the party bus on the way home and danced and sang. I had a lot of fun and it was enjoyable. . Sunday: . I spent the day with my family. It started off with going to the farmer’s market with my parents. I had a chocolate almond croissant there and it has been my favorite croissant I have ever had in my life. Afterwards, I came back home and started doing my homework, which took almost until 9 PM. . Schedule: . 🏫School: 8:00 AM - 2:30 PM 👩🏽‍🏫Work: 3:00 PM - 4:00 PM 👩🏽‍💻Homework: 4:00 PM - 7:00 PM 🍽 Dinner: 7:00 - 7:30 PM 🚿Shower: 7:30 PM - 8:15 PM 🎓College work: 8:15 PM - 9:30 PM 🛀Wind Down: 9:30 PM - 11:00 PM 🛌 Sleep: 11:00 PM .",
            "url": "https://amitha-sanka.github.io/repository_1/markdown/2022/08/26/blog.html",
            "relUrl": "/markdown/2022/08/26/blog.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Amitha's First Markdown Post",
            "content": "Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://amitha-sanka.github.io/repository_1/markdown/2022/08/25/amitha-markdown-post.html",
            "relUrl": "/markdown/2022/08/25/amitha-markdown-post.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Title",
            "content": ". toc: true layout: post description: Beginner level Python Quiz categories: [jupyter] . title: Amitha&#39;s Python Quiz . print(&quot;Welcome to Amitha&#39;s Quiz!&quot;) start = input(&quot;Do you want to take Amitha&#39;s Quiz?&quot;) score = 0 def ask_for_answer(): answer = input() return answer def is_answer_right(user_answer, answer): global score if user_answer == answer: score += 1 print(f&quot;Good job! The answer is {answer}!&quot;) else: print(f&quot;Sorry, incorrect 😢. The right answer was {answer}.&quot;) print(f&quot;Your score is {score}&quot;) if start.lower() == &quot;yes&quot; or start.lower() == &quot;y&quot;: print(&quot;Great! Good luck 😊&quot;) else: print(&quot;Take a mindful minute. You got this :)&quot;) print(&quot;This game will have 5 questions!&quot;) #Question 1 print(&quot;Question 1: What structures programs so that properties and behaviors are bundled into individual objects?&quot;) user_answer = ask_for_answer() is_answer_right(user_answer, &quot;OOP&quot;) #Question 2 print(&quot;Question 2: What are code lines that will not be executed?&quot;) user_answer = ask_for_answer() is_answer_right(user_answer, &quot;comments&quot;) #Question 3 print(&quot;Question 3: what is an integer in python?&quot;) user_answer = ask_for_answer() is_answer_right(user_answer, &quot;int&quot;) #Question 4 print(&quot;Question 4: What is a statement with a hypothesis followed by a conclusion called?&quot;) user_answer = ask_for_answer() is_answer_right(user_answer, &quot;Object Oriented Programming&quot;) #Question 5 print(&quot;Question 5: Translates a program written in a high-level language into a low-level language?&quot;) user_answer = ask_for_answer() is_answer_right(user_answer, &quot;if-then statement&quot;) if score == 5: print(&quot;Wow! You know your stuff! Keep up the good work! 🤗&quot;) if score = 1: print(&quot;Keep studying :)&quot;) else: print(&quot;You&#39;re average :/&quot;) # white_check_mark # eyes # raised_hands . Welcome to Amitha&#39;s Quiz! Great! Good luck 😊 This game will have 5 questions! Question 1: What structures programs so that properties and behaviors are bundled into individual objects? Good job! The answer is OOP! Your score is 1 Question 2: What are code lines that will not be executed? Good job! The answer is comments! Your score is 2 Question 3: what is an integer in python? Good job! The answer is int! Your score is 3 Question 4: What is a statement with a hypothesis followed by a conclusion called? Good job! The answer is Object Oriented Programming! Your score is 4 Question 5: Translates a program written in a high-level language into a low-level language? Good job! The answer is if-then statement! Your score is 5 Wow! You know your stuff! Keep up the good work! 🤗 You&#39;re average :/ .",
            "url": "https://amitha-sanka.github.io/repository_1/2022/08/25/amitha-jupyter-notebook.html",
            "relUrl": "/2022/08/25/amitha-jupyter-notebook.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://amitha-sanka.github.io/repository_1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://amitha-sanka.github.io/repository_1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://amitha-sanka.github.io/repository_1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
      ,"page6": {
          "title": "submenu",
          "content": "Jupyter Notebook that shows personal usage of Jupyter JavaScript kernel . Link . Post that uses HTML fragments and JavaScript data to build a table . Link .",
          "url": "https://amitha-sanka.github.io/repository_1/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://amitha-sanka.github.io/repository_1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}